{"version":3,"sources":["webpack:///./src/app/settings/settings.module.ts","webpack:///./src/app/settings/settings.page.html","webpack:///./src/app/settings/settings.page.scss","webpack:///./src/app/settings/settings.page.ts"],"names":[],"mappings":"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","file":"settings-settings-module.js","sourcesContent":["import { IonicModule } from '@ionic/angular';\nimport { RouterModule } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { SettingsPage } from './settings.page';\n\n@NgModule({\n  imports: [\n    IonicModule,\n    CommonModule,\n    FormsModule,\n    RouterModule.forChild([{ path: '', component: SettingsPage }])\n  ],\n  declarations: [SettingsPage]\n})\nexport class SettingsPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title>\\n      Settings\\n    </ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-list lines=\\\"none\\\" [class.hide]=\\\"token\\\">\\n    <ion-item>\\n      <ion-label>Region</ion-label>\\n      <ion-select [(ngModel)]=\\\"region\\\" interface=\\\"popover\\\">\\n        <ion-select-option value=\\\"eastus\\\">East US</ion-select-option>\\n        <ion-select-option value=\\\"westus\\\">West US</ion-select-option>\\n        <ion-select-option value=\\\"southeastasia\\\">Southeast Asia</ion-select-option>\\n        <ion-select-option value=\\\"westeurope\\\">West Europe</ion-select-option>\\n      </ion-select>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\"><ion-icon name=\\\"key\\\"></ion-icon> Key</ion-label>\\n      <ion-input [(ngModel)]=\\\"key\\\" type=\\\"text\\\" clearInput></ion-input>\\n    </ion-item>\\n    <ion-button expand=\\\"block\\\" (click)=\\\"saveSettings();\\\">Save</ion-button>\\n  </ion-list>\\n</ion-content>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NldHRpbmdzL3NldHRpbmdzLnBhZ2Uuc2NzcyJ9 */\"","import { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Platform, ToastController } from '@ionic/angular';\nimport { Storage } from '@ionic/storage';\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: 'settings.page.html',\n  styleUrls: ['settings.page.scss']\n})\nexport class SettingsPage {\n  region: string;\n  key: string;\n  token: string;\n  tokenUrl: string;\n\n  constructor(\n    private platform: Platform,\n    private storage: Storage,\n    private toastCtrl: ToastController,\n    private http: HttpClient\n  ) {\n    this.platform.ready().then(() => {\n      this.storage.get('region').then((region) => {\n        this.region = region ? region : 'westus';\n        this.tokenUrl = `https://${this.region}.api.cognitive.microsoft.com/sts/v1.0/issueToken`;\n        this.storage.get('key').then((key) => {\n          this.key = key;\n          if (!key) {\n            this.toastCtrl.create({\n              message: 'No key present.',\n              duration: 1000\n            }).then((toast) => {\n              toast.present();\n            });\n          } else {\n            this.storage.get('token').then((token) => {\n              if (!token) {\n                this.getToken();\n              } else {\n                this.token = token;\n              }\n            });\n          }\n        });\n      });\n    });\n  }\n\n  getToken() {\n    this.http.post(this.tokenUrl, '', {\n      headers: {'Ocp-Apim-Subscription-Key': this.key},\n      responseType: 'text'\n    }).subscribe((token) => {\n      this.storage.set('token', token).then(() => {\n        this.token = token;\n        this.toastCtrl.create({\n          message: 'Token set!',\n          duration: 1000\n        }).then((toast) => {\n          toast.present();\n        });\n      });\n    }, (err) => {\n      this.toastCtrl.create({\n        message: 'Wrong key or region?\\n' + err.message,\n        duration: 1000\n      }).then((toast) => {\n        toast.present();\n      });\n    });\n  }\n\n  saveSettings() {\n    this.storage.set('region', this.region).then(() => {\n      this.storage.set('key', this.key).then(() => {\n        this.getToken();\n      });\n    });\n  }\n}\n"],"sourceRoot":""}